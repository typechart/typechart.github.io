{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction TypeChart is a lightweight syntax to define simple charts with plaintext. Important TypeChart Syntax is still in its early design phase. Everything within is subject to change. This guide includes several tutorials and reference. Recommendation You may start using TypeChart without reading syntax. Take a look at some examples and just read tutorial or reference on demand. Here is the recommendation: Take a look at some examples at Examples or Selected Syntax Examples Sheet . You may have feeling what TypeChart syntax looks like. Take a look at the page of Basic Concepts to have some basic concept about the code. You may start reading tutorial Beginner to learn from how to write text to how to write org-chart. Then you may select your preferred charts and read the corresponding reference.","title":"Welcome"},{"location":"#introduction","text":"TypeChart is a lightweight syntax to define simple charts with plaintext. Important TypeChart Syntax is still in its early design phase. Everything within is subject to change. This guide includes several tutorials and reference.","title":"Introduction"},{"location":"#recommendation","text":"You may start using TypeChart without reading syntax. Take a look at some examples and just read tutorial or reference on demand. Here is the recommendation: Take a look at some examples at Examples or Selected Syntax Examples Sheet . You may have feeling what TypeChart syntax looks like. Take a look at the page of Basic Concepts to have some basic concept about the code. You may start reading tutorial Beginner to learn from how to write text to how to write org-chart. Then you may select your preferred charts and read the corresponding reference.","title":"Recommendation"},{"location":"$bar/","text":"$bar There are three related attributes: $bar $bar.scale $bar.width They are used to define attributes related a bar chart. Info These attributes are only for bar chart. $bar Grouped or Stacked bar chart. Usage As meta data attribute - set the bar chart is grouped or stacked. Assignment $bar:v where v is one of the followings: stack - the chart will be stacked bar chart (default) group - the chart will be grouped bar chart Examples The visual effect of $bar : %%% type bar a 10,20 b 30,20 c 18,18 %%% type bar %%% $bar:group a 10,20 b 30,20 c 18,18 $bar.scale (Vertical) Scale of the bar chart. Usage As meta data attribute - set the vertical scale to enlarge or shorten the interval of y-axis of the bar chart. Assignment $bar.scale:v where v is a number of the scale factor. $bar.scale is automatically calculated by default. Examples The visual effect of $bar.scale : %%% type bar [Block A$n:20] [Block B$n:35] [Block C$n:40] %%% type bar %%% $bar.scale:5 [Block A$n:20] [Block B$n:35] [Block C$n:40] $bar.width The width of bars in a bar chart Usage As meta data attribute - set the width bars in the bar chart. Assignment $bar.width:v where v is an integer of the width of bars. v is 50 by default. Examples The visual effect of $bar.width : %%% type bar [Block A$n:20] [Block B$n:35] [Block C$n:40] %%% type bar %%% $bar.width:90 [Block A$n:20] [Block B$n:35] [Block C$n:40]","title":"$bar"},{"location":"$bar/#bar","text":"There are three related attributes: $bar $bar.scale $bar.width They are used to define attributes related a bar chart. Info These attributes are only for bar chart.","title":"$bar"},{"location":"$bar/#bar_1","text":"Grouped or Stacked bar chart.","title":"$bar"},{"location":"$bar/#usage","text":"As meta data attribute - set the bar chart is grouped or stacked.","title":"Usage"},{"location":"$bar/#assignment","text":"$bar:v where v is one of the followings: stack - the chart will be stacked bar chart (default) group - the chart will be grouped bar chart","title":"Assignment"},{"location":"$bar/#examples","text":"The visual effect of $bar : %%% type bar a 10,20 b 30,20 c 18,18 %%% type bar %%% $bar:group a 10,20 b 30,20 c 18,18","title":"Examples"},{"location":"$bar/#barscale","text":"(Vertical) Scale of the bar chart.","title":"$bar.scale"},{"location":"$bar/#usage_1","text":"As meta data attribute - set the vertical scale to enlarge or shorten the interval of y-axis of the bar chart.","title":"Usage"},{"location":"$bar/#assignment_1","text":"$bar.scale:v where v is a number of the scale factor. $bar.scale is automatically calculated by default.","title":"Assignment"},{"location":"$bar/#examples_1","text":"The visual effect of $bar.scale : %%% type bar [Block A$n:20] [Block B$n:35] [Block C$n:40] %%% type bar %%% $bar.scale:5 [Block A$n:20] [Block B$n:35] [Block C$n:40]","title":"Examples"},{"location":"$bar/#barwidth","text":"The width of bars in a bar chart","title":"$bar.width"},{"location":"$bar/#usage_2","text":"As meta data attribute - set the width bars in the bar chart.","title":"Usage"},{"location":"$bar/#assignment_2","text":"$bar.width:v where v is an integer of the width of bars. v is 50 by default.","title":"Assignment"},{"location":"$bar/#examples_2","text":"The visual effect of $bar.width : %%% type bar [Block A$n:20] [Block B$n:35] [Block C$n:40] %%% type bar %%% $bar.width:90 [Block A$n:20] [Block B$n:35] [Block C$n:40]","title":"Examples"},{"location":"$bg/","text":"Background color of blocks Usage As meta data attribute - set the default background color of blocks in the chart. As block inline attribute - set the background color of a specific block. Assignment $bg:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) . Examples As a meta data attribute: %%% $bg:yellow A[Apple],B[Banana],C[Cherry] As a block inline attribute: A[Apple],B[Banana$bg:yellow],C[Cherry]","title":"$bg"},{"location":"$bg/#usage","text":"As meta data attribute - set the default background color of blocks in the chart. As block inline attribute - set the background color of a specific block.","title":"Usage"},{"location":"$bg/#assignment","text":"$bg:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) .","title":"Assignment"},{"location":"$bg/#examples","text":"As a meta data attribute: %%% $bg:yellow A[Apple],B[Banana],C[Cherry] As a block inline attribute: A[Apple],B[Banana$bg:yellow],C[Cherry]","title":"Examples"},{"location":"$border/","text":"$border There are two related attributes: $border $border.color They are used to define attributes related border of a block. $border Border width of a block Usage As meta data attribute - set the default border width of all blocks in the chart. As block inline attribute - set the border width of a specific block. Info $border as meta data attribute do not apply to node notations of group . Assignment $border:v where v an integer which is the number of pixel of border width. Default $border is 0 means no border. Info The $border of Blocks of group is 1 by default. Examples As a meta data attribute: %%% $border:2 A,B,C As a block inline attribute: A,B,c[C$border:2] $border.color The color of the border of a block Usage As meta data attribute - set the default border color of all blocks in the chart. As block inline attribute - set the border color of a specific block. Assignment $border.color:v where v the color value. See Colors for details. Default $border.color is black . Examples As a meta data attribute: %%% $border:2 $border.color:red A,B,C As a block inline attribute: A,B,c[C$border:2 $border.color:red]","title":"$border"},{"location":"$border/#border","text":"There are two related attributes: $border $border.color They are used to define attributes related border of a block.","title":"$border"},{"location":"$border/#border_1","text":"Border width of a block","title":"$border"},{"location":"$border/#usage","text":"As meta data attribute - set the default border width of all blocks in the chart. As block inline attribute - set the border width of a specific block. Info $border as meta data attribute do not apply to node notations of group .","title":"Usage"},{"location":"$border/#assignment","text":"$border:v where v an integer which is the number of pixel of border width. Default $border is 0 means no border. Info The $border of Blocks of group is 1 by default.","title":"Assignment"},{"location":"$border/#examples","text":"As a meta data attribute: %%% $border:2 A,B,C As a block inline attribute: A,B,c[C$border:2]","title":"Examples"},{"location":"$border/#bordercolor","text":"The color of the border of a block","title":"$border.color"},{"location":"$border/#usage_1","text":"As meta data attribute - set the default border color of all blocks in the chart. As block inline attribute - set the border color of a specific block.","title":"Usage"},{"location":"$border/#assignment_1","text":"$border.color:v where v the color value. See Colors for details. Default $border.color is black .","title":"Assignment"},{"location":"$border/#examples_1","text":"As a meta data attribute: %%% $border:2 $border.color:red A,B,C As a block inline attribute: A,B,c[C$border:2 $border.color:red]","title":"Examples"},{"location":"$color/","text":"$color There are two related attributes: $color $color.all $color Text color of a text line in a textbox. Usage As meta data attribute - set the default text color of textboxes in the chart. As block inline attribute - set the text color of a specific text line in a textbox. Assignment $color:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) . Examples As a meta data attribute: %%% $color:red A,B,C As an block inline attribute: A,[B $color:red],C As a block inline attribute of a text line: A[A//Ashley],[B $color:red //Boris],C[C//Carol] $color.all Text color of a all text line in a textbox. Usage As block inline attribute - set the text color of all text line in a textbox. Assignment $color.all:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) .","title":"$color"},{"location":"$color/#color","text":"There are two related attributes: $color $color.all","title":"$color"},{"location":"$color/#color_1","text":"Text color of a text line in a textbox.","title":"$color"},{"location":"$color/#usage","text":"As meta data attribute - set the default text color of textboxes in the chart. As block inline attribute - set the text color of a specific text line in a textbox.","title":"Usage"},{"location":"$color/#assignment","text":"$color:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) .","title":"Assignment"},{"location":"$color/#examples","text":"As a meta data attribute: %%% $color:red A,B,C As an block inline attribute: A,[B $color:red],C As a block inline attribute of a text line: A[A//Ashley],[B $color:red //Boris],C[C//Carol]","title":"Examples"},{"location":"$color/#colorall","text":"Text color of a all text line in a textbox.","title":"$color.all"},{"location":"$color/#usage_1","text":"As block inline attribute - set the text color of all text line in a textbox.","title":"Usage"},{"location":"$color/#assignment_1","text":"$color.all:value where value can be one of the followings: CSS color names, #RRGGBB hex color code, or CSS function rgba(r,g,b,a) .","title":"Assignment"},{"location":"$cp/","text":"$cp There are four related attributes: $cp $cp.from $cp.points $cp.to They are used to define attributes related connection points of a link. $cp $cp is a short form to define $cp.from and $cp.to in at the same time. Usage As meta data attribute - set the default connection points of fromNode and toNode of links in the chart. As toNode block inline attribute - set the connection points of fromNode and toNode of a specific link. Assignment $cp:f,t where: f is the connection point of the fromNode of a link/links. Same as the value of $cp.from . t is the connection point of the toNode of a link/links. Same as the value of $cp.to . Examples As a meta data attribute: %%% $cp:w,n A--->B--->C As toNode block inline attribute A--->B--->c[C$cp:w,n] $cp.from The connection point of fromNode of a link/links. Usage As meta data attribute - set the default connection points of fromNode of links in the chart. As toNode block inline attribute - set the connection point of fromNode of a specific link. Assignment $cp.from:f where: f is the connection point name of the fromNode of a link/links. See Naming of connection points of a block for details. Examples As a meta data attribute: %%% $cp.from:w A--->B--->C As toNode inline attribute: A--->B--->c[C$cp.from:w] $cp.points The number of turning points, including start and end points, of a link. Usage As meta data attribute - set the default number of turning points of links in the chart. As toNode block inline attribute - set the number of turning points of a specific link. Assignment $cp.points:v where: v is an integer. When v is 2 the link is a straight line, otherwise the link is with multiple turning points which is automatically decided by TypeChart. See No of turning points of a link for details. Examples As a meta data attribute: %%% $cp.points:2 A ... B,C As toNode block inline attribute: A ... B,C[C$cp.points:2] $cp.to The connection point of toNode of a link/links. Usage As meta data attribute - set the default connection points of toNode of links in the chart. As toNode block inline attribute - set the connection point of toNode of a specific link. Assignment $cp.to:t where: t is the connection point name of the toNode of a link/links. See Naming of connection points of a block for details. Examples As a meta data attribute: %%% $cp.to:w A--->B--->C As toNode inline attribute: A--->B--->c[C$cp.to:w]","title":"$cp"},{"location":"$cp/#cp","text":"There are four related attributes: $cp $cp.from $cp.points $cp.to They are used to define attributes related connection points of a link.","title":"$cp"},{"location":"$cp/#cp_1","text":"$cp is a short form to define $cp.from and $cp.to in at the same time.","title":"$cp"},{"location":"$cp/#usage","text":"As meta data attribute - set the default connection points of fromNode and toNode of links in the chart. As toNode block inline attribute - set the connection points of fromNode and toNode of a specific link.","title":"Usage"},{"location":"$cp/#assignment","text":"$cp:f,t where: f is the connection point of the fromNode of a link/links. Same as the value of $cp.from . t is the connection point of the toNode of a link/links. Same as the value of $cp.to .","title":"Assignment"},{"location":"$cp/#examples","text":"As a meta data attribute: %%% $cp:w,n A--->B--->C As toNode block inline attribute A--->B--->c[C$cp:w,n]","title":"Examples"},{"location":"$cp/#cpfrom","text":"The connection point of fromNode of a link/links.","title":"$cp.from"},{"location":"$cp/#usage_1","text":"As meta data attribute - set the default connection points of fromNode of links in the chart. As toNode block inline attribute - set the connection point of fromNode of a specific link.","title":"Usage"},{"location":"$cp/#assignment_1","text":"$cp.from:f where: f is the connection point name of the fromNode of a link/links. See Naming of connection points of a block for details.","title":"Assignment"},{"location":"$cp/#examples_1","text":"As a meta data attribute: %%% $cp.from:w A--->B--->C As toNode inline attribute: A--->B--->c[C$cp.from:w]","title":"Examples"},{"location":"$cp/#cppoints","text":"The number of turning points, including start and end points, of a link.","title":"$cp.points"},{"location":"$cp/#usage_2","text":"As meta data attribute - set the default number of turning points of links in the chart. As toNode block inline attribute - set the number of turning points of a specific link.","title":"Usage"},{"location":"$cp/#assignment_2","text":"$cp.points:v where: v is an integer. When v is 2 the link is a straight line, otherwise the link is with multiple turning points which is automatically decided by TypeChart. See No of turning points of a link for details.","title":"Assignment"},{"location":"$cp/#examples_2","text":"As a meta data attribute: %%% $cp.points:2 A ... B,C As toNode block inline attribute: A ... B,C[C$cp.points:2]","title":"Examples"},{"location":"$cp/#cpto","text":"The connection point of toNode of a link/links.","title":"$cp.to"},{"location":"$cp/#usage_3","text":"As meta data attribute - set the default connection points of toNode of links in the chart. As toNode block inline attribute - set the connection point of toNode of a specific link.","title":"Usage"},{"location":"$cp/#assignment_3","text":"$cp.to:t where: t is the connection point name of the toNode of a link/links. See Naming of connection points of a block for details.","title":"Assignment"},{"location":"$cp/#examples_3","text":"As a meta data attribute: %%% $cp.to:w A--->B--->C As toNode inline attribute: A--->B--->c[C$cp.to:w]","title":"Examples"},{"location":"$grid/","text":"$grid There are two related attributes: $grid $grid.interval They are used to define attributes related a grid lines of a chart. In the bar chart below, the horizontal lines of 40 and 80 are the gride lines of the chart. $grid Control to display the grid lines Usage As meta data attribute - set to show or hide grid lines of a chart. Assignment $grid:v where v can be one of the followings: no , n , 0 - hide the grid lines otherwise - show the grid lines By default grid lines are shown. Examples As a meta data attribute: hide the grid lines in a bar chart. %%% type bar %%% $grid:no [Block A$n:100] [Block B$n:25] [Block C$n:60] $grid.interval The interval between consecutive grid lines Usage As meta data attribute - set interval between grid lines of a chart. Assignment $grid.interval:v where v is an integer to represent the interval v is 10 by default Examples The visual effect of $grid.interval : %%% type bar [Block A$n:100] [Block B$n:25] [Block C$n:60] %%% type bar %%% $grid.interval:20 [Block A$n:100] [Block B$n:25] [Block C$n:60]","title":"$grid"},{"location":"$grid/#grid","text":"There are two related attributes: $grid $grid.interval They are used to define attributes related a grid lines of a chart. In the bar chart below, the horizontal lines of 40 and 80 are the gride lines of the chart.","title":"$grid"},{"location":"$grid/#grid_1","text":"Control to display the grid lines","title":"$grid"},{"location":"$grid/#usage","text":"As meta data attribute - set to show or hide grid lines of a chart.","title":"Usage"},{"location":"$grid/#assignment","text":"$grid:v where v can be one of the followings: no , n , 0 - hide the grid lines otherwise - show the grid lines By default grid lines are shown.","title":"Assignment"},{"location":"$grid/#examples","text":"As a meta data attribute: hide the grid lines in a bar chart. %%% type bar %%% $grid:no [Block A$n:100] [Block B$n:25] [Block C$n:60]","title":"Examples"},{"location":"$grid/#gridinterval","text":"The interval between consecutive grid lines","title":"$grid.interval"},{"location":"$grid/#usage_1","text":"As meta data attribute - set interval between grid lines of a chart.","title":"Usage"},{"location":"$grid/#assignment_1","text":"$grid.interval:v where v is an integer to represent the interval v is 10 by default","title":"Assignment"},{"location":"$grid/#examples_1","text":"The visual effect of $grid.interval : %%% type bar [Block A$n:100] [Block B$n:25] [Block C$n:60] %%% type bar %%% $grid.interval:20 [Block A$n:100] [Block B$n:25] [Block C$n:60]","title":"Examples"},{"location":"$import/","text":"$import Disallow import of a text line to other charts Usage As header/footer inline attribute - disallow the text line to import to other charts. Assignment $import:no - disable the text line to import to other charts. Example # header of a chart which will not be imported. $import:no","title":"$import"},{"location":"$import/#import","text":"Disallow import of a text line to other charts","title":"$import"},{"location":"$import/#usage","text":"As header/footer inline attribute - disallow the text line to import to other charts.","title":"Usage"},{"location":"$import/#assignment","text":"$import:no - disable the text line to import to other charts.","title":"Assignment"},{"location":"$import/#example","text":"# header of a chart which will not be imported. $import:no","title":"Example"},{"location":"$is/","text":"$is Special purpose block TypeChat use $is:something to define special purpose blocks. Special purpose block is a special visual part in chart. Examples are y-axis of bar chart, legend of a pie chart, group block of some blocks in a chart etc. Usage As block inline attribute - define a block as a special purpose block. Assignment $is:class where class is special purpose block class name of a chart type. Some common class es are: $is:group - define a node notation as a group block of all chart type. $is:y-axis - define a node notation as y-axis of a bar chart type. $is:legend - define a node notation as legend of a bar or pie chart type. $is:leg - define a node notation as a leg of a ghostleg chart type.","title":"$is"},{"location":"$is/#is","text":"Special purpose block TypeChat use $is:something to define special purpose blocks. Special purpose block is a special visual part in chart. Examples are y-axis of bar chart, legend of a pie chart, group block of some blocks in a chart etc.","title":"$is"},{"location":"$is/#usage","text":"As block inline attribute - define a block as a special purpose block.","title":"Usage"},{"location":"$is/#assignment","text":"$is:class where class is special purpose block class name of a chart type. Some common class es are: $is:group - define a node notation as a group block of all chart type. $is:y-axis - define a node notation as y-axis of a bar chart type. $is:legend - define a node notation as legend of a bar or pie chart type. $is:leg - define a node notation as a leg of a ghostleg chart type.","title":"Assignment"},{"location":"$k/","text":"$k Pseudo random parameter Some chart may allow randomly generation (e.g. ghostleg chart ). Pseudo random parameter is a integer that frozens the generation. Usage As meta data attribute - set the pseudo random parameter of of a chart. Note Not all chart supports random generation. Please refer the reference of the chart type. Assignment $k:v where v is an integer which is corresponding to a generation of a chart. Example As meta data attribute in ghostleg chart: %%% type ghostleg %%% $k:5 a---1 b---2 c---3","title":"$k"},{"location":"$k/#k","text":"Pseudo random parameter Some chart may allow randomly generation (e.g. ghostleg chart ). Pseudo random parameter is a integer that frozens the generation.","title":"$k"},{"location":"$k/#usage","text":"As meta data attribute - set the pseudo random parameter of of a chart. Note Not all chart supports random generation. Please refer the reference of the chart type.","title":"Usage"},{"location":"$k/#assignment","text":"$k:v where v is an integer which is corresponding to a generation of a chart.","title":"Assignment"},{"location":"$k/#example","text":"As meta data attribute in ghostleg chart: %%% type ghostleg %%% $k:5 a---1 b---2 c---3","title":"Example"},{"location":"$link/","text":"$link There are one related attribute: $link.color They are used to refine a link. $link.color Color of a Link Usage As meta data attribute - set the default color of links in the chart. As toNode block inline attribute - set the color of a specific link. Assignment $link.color:v where v the color value. See Colors for details. Examples As a meta data attribute: %%% $link.color:green A --- B,C X ... Y X ... Z As toNode block inline attribute: %%% $link.color:green A --- B,C[C$link.color:red] X ... Y X ... Z","title":"$link"},{"location":"$link/#link","text":"There are one related attribute: $link.color They are used to refine a link.","title":"$link"},{"location":"$link/#linkcolor","text":"Color of a Link","title":"$link.color"},{"location":"$link/#usage","text":"As meta data attribute - set the default color of links in the chart. As toNode block inline attribute - set the color of a specific link.","title":"Usage"},{"location":"$link/#assignment","text":"$link.color:v where v the color value. See Colors for details.","title":"Assignment"},{"location":"$link/#examples","text":"As a meta data attribute: %%% $link.color:green A --- B,C X ... Y X ... Z As toNode block inline attribute: %%% $link.color:green A --- B,C[C$link.color:red] X ... Y X ... Z","title":"Examples"},{"location":"$members/","text":"$members Members of a group Usage As block inline attribute - define members of a group block. Note A node containing $members assignment will automatically become a group block. Assignment $members:nodeLabelList where nodeLabelList is a string of comma separated list of labels of node notations which are members of a group. nodeLabelList cannot contains spaces or tabs. Note nodeLabelList is not required to be a full list of all members of a group. Since a group is just a block covering the area you want, it is usually enough to just list the left top and right bottom members in the assignment. Examples %%% type grid # [],[],1[My Pets] [] a[Felix],b[Tigger],c[Charlie],d[Teddy],e[Molly] 1...a,b,c,d,e g[$members:c,d my dogs]","title":"$members"},{"location":"$members/#members","text":"Members of a group","title":"$members"},{"location":"$members/#usage","text":"As block inline attribute - define members of a group block. Note A node containing $members assignment will automatically become a group block.","title":"Usage"},{"location":"$members/#assignment","text":"$members:nodeLabelList where nodeLabelList is a string of comma separated list of labels of node notations which are members of a group. nodeLabelList cannot contains spaces or tabs. Note nodeLabelList is not required to be a full list of all members of a group. Since a group is just a block covering the area you want, it is usually enough to just list the left top and right bottom members in the assignment.","title":"Assignment"},{"location":"$members/#examples","text":"%%% type grid # [],[],1[My Pets] [] a[Felix],b[Tigger],c[Charlie],d[Teddy],e[Molly] 1...a,b,c,d,e g[$members:c,d my dogs]","title":"Examples"},{"location":"$n/","text":"$n Numeric parameter of a block Some charts may have numeric data to decide how to draw a block in a chart. An example is the the height of a bar in a bar chart is proportional to the value of the bar presents. Pie chart is another example. %%% type bar [Block A $n:10] [Block B $n:40] [Block C $n:25] %%% type pie [Block A $n:10] [Block B $n:40] [Block C $n:25] Usage As block inline attribute - set the numeric parameter of a specific block. Assignment $n:v where v is numeric value of a block. If the numeric value of a block is at the end of the block content, $n: can be omitted. TypeChart will try to parse the last numeric value in your block content as a $n value. Therefore the followings are the same: %%% type bar [Block A $n:10] [Block B $n:40] [Block C $n:25] and %%% type bar [Block A 10] [Block B 40] [Block C 25]","title":"$n"},{"location":"$n/#n","text":"Numeric parameter of a block Some charts may have numeric data to decide how to draw a block in a chart. An example is the the height of a bar in a bar chart is proportional to the value of the bar presents. Pie chart is another example. %%% type bar [Block A $n:10] [Block B $n:40] [Block C $n:25] %%% type pie [Block A $n:10] [Block B $n:40] [Block C $n:25]","title":"$n"},{"location":"$n/#usage","text":"As block inline attribute - set the numeric parameter of a specific block.","title":"Usage"},{"location":"$n/#assignment","text":"$n:v where v is numeric value of a block. If the numeric value of a block is at the end of the block content, $n: can be omitted. TypeChart will try to parse the last numeric value in your block content as a $n value. Therefore the followings are the same: %%% type bar [Block A $n:10] [Block B $n:40] [Block C $n:25] and %%% type bar [Block A 10] [Block B 40] [Block C 25]","title":"Assignment"},{"location":"$of/","text":"$of Reserved","title":"$of"},{"location":"$of/#of","text":"Reserved","title":"$of"},{"location":"$pie/","text":"$pie There are three related attributes: $pie.dp $pie.inner $pie.outside $pie.show They are used to define attributes related a pie chart. Info These attributes are only for pie chart. $pie.dp The decimal place of the percentage of the number of a slice of pie when $pie.show:percent . Usage As meta data attribute - set the decimal place to display the percentage of the number of a slice of the pie. Assignment $pie.dp:v where v is the number of decimal place of the percentage. v by default is 0 . Info This attribute is only for $pie.show:percent Examples As a meta data attribute: set 1 decimal place for percentage. %%% type pie %%% $pie.show:percent %%% $pie.dp:1 [Block A $n:20] [Block B $n:35] [Block C $n:40] $pie.inner Inner radius of the pie (donut) Usage As meta data attribute - set the inner radius of the pie(donut). Assignment $pie.inner:v where v is an integer of the inner radius of the pie(donut). v is 40 by default. $pie.inner:0 will the pie without inner hole. Examples As a meta data attribute: set the inner radius to be 0. %%% type pie %%% $pie.inner:0 [Block A$n:20] [Block B//$n:35] [Block C$n:40] $pie.outside Control to display the content of sectors outside the pie/donut Usage As meta data attribute - set to display the content of sectors outside the pie/donut. Assignment $pie.outside:yes Examples As a meta data attribute: See the effect of the attribute. $pie.show Control to display the numeric value as number, percentage, hidden Usage As meta data attribute - set the behavior to display the numbers of the slices of the pie(donut). Assignment $pie.inner:v where v is one of the followings: number - display the number as number (which is default) percent - display the number as percentage no - hide the number Examples As a meta data attribute: hide the number in the sectors. %%% type pie %%% $pie.inner:0 %%% $pie.show:no [Block A$n:20] [Block B$n:35] [Block C$n:40]","title":"$pie"},{"location":"$pie/#pie","text":"There are three related attributes: $pie.dp $pie.inner $pie.outside $pie.show They are used to define attributes related a pie chart. Info These attributes are only for pie chart.","title":"$pie"},{"location":"$pie/#piedp","text":"The decimal place of the percentage of the number of a slice of pie when $pie.show:percent .","title":"$pie.dp"},{"location":"$pie/#usage","text":"As meta data attribute - set the decimal place to display the percentage of the number of a slice of the pie.","title":"Usage"},{"location":"$pie/#assignment","text":"$pie.dp:v where v is the number of decimal place of the percentage. v by default is 0 . Info This attribute is only for $pie.show:percent","title":"Assignment"},{"location":"$pie/#examples","text":"As a meta data attribute: set 1 decimal place for percentage. %%% type pie %%% $pie.show:percent %%% $pie.dp:1 [Block A $n:20] [Block B $n:35] [Block C $n:40]","title":"Examples"},{"location":"$pie/#pieinner","text":"Inner radius of the pie (donut)","title":"$pie.inner"},{"location":"$pie/#usage_1","text":"As meta data attribute - set the inner radius of the pie(donut).","title":"Usage"},{"location":"$pie/#assignment_1","text":"$pie.inner:v where v is an integer of the inner radius of the pie(donut). v is 40 by default. $pie.inner:0 will the pie without inner hole.","title":"Assignment"},{"location":"$pie/#examples_1","text":"As a meta data attribute: set the inner radius to be 0. %%% type pie %%% $pie.inner:0 [Block A$n:20] [Block B//$n:35] [Block C$n:40]","title":"Examples"},{"location":"$pie/#pieoutside","text":"Control to display the content of sectors outside the pie/donut","title":"$pie.outside"},{"location":"$pie/#usage_2","text":"As meta data attribute - set to display the content of sectors outside the pie/donut.","title":"Usage"},{"location":"$pie/#assignment_2","text":"$pie.outside:yes","title":"Assignment"},{"location":"$pie/#examples_2","text":"As a meta data attribute: See the effect of the attribute.","title":"Examples"},{"location":"$pie/#pieshow","text":"Control to display the numeric value as number, percentage, hidden","title":"$pie.show"},{"location":"$pie/#usage_3","text":"As meta data attribute - set the behavior to display the numbers of the slices of the pie(donut).","title":"Usage"},{"location":"$pie/#assignment_3","text":"$pie.inner:v where v is one of the followings: number - display the number as number (which is default) percent - display the number as percentage no - hide the number","title":"Assignment"},{"location":"$pie/#examples_3","text":"As a meta data attribute: hide the number in the sectors. %%% type pie %%% $pie.inner:0 %%% $pie.show:no [Block A$n:20] [Block B$n:35] [Block C$n:40]","title":"Examples"},{"location":"$resize/","text":"$resize Disable auto resize of a block Only available for tree and grid types. Usage As meta data attribute - set auto resize of all blocks to be disabled in the chart. As block inline attribute - set auto resize of a specific block to be disabled. Assignment $resize:no Default value of $resize is yes Examples As a meta data attribute of tree chart: %%% $resize:no a[abcdefg] b[123] c[12345] d[12345678] a---b,c,d As a meta data attribute of grid chart: %%% type grid %%% $resize:no a[abcdefg] b[123] c[12345] d[12345678] As a block inline attribute of grid chart: %%% type grid a[abcdefg] b[123] c[123$resize:no] d[12345678]","title":"$resize"},{"location":"$resize/#resize","text":"Disable auto resize of a block Only available for tree and grid types.","title":"$resize"},{"location":"$resize/#usage","text":"As meta data attribute - set auto resize of all blocks to be disabled in the chart. As block inline attribute - set auto resize of a specific block to be disabled.","title":"Usage"},{"location":"$resize/#assignment","text":"$resize:no Default value of $resize is yes","title":"Assignment"},{"location":"$resize/#examples","text":"As a meta data attribute of tree chart: %%% $resize:no a[abcdefg] b[123] c[12345] d[12345678] a---b,c,d As a meta data attribute of grid chart: %%% type grid %%% $resize:no a[abcdefg] b[123] c[12345] d[12345678] As a block inline attribute of grid chart: %%% type grid a[abcdefg] b[123] c[123$resize:no] d[12345678]","title":"Examples"},{"location":"$text/","text":"$text Default text content of a block It mainly is used in the import source chart to provide a default text content of a node, but able to be override by the caller chart. It is related the reusability of TypeChart. Examples %%% $$a {$text:'Text from $text'} a[Text from block]","title":"$text"},{"location":"$text/#text","text":"Default text content of a block It mainly is used in the import source chart to provide a default text content of a node, but able to be override by the caller chart. It is related the reusability of TypeChart.","title":"$text"},{"location":"$text/#examples","text":"%%% $$a {$text:'Text from $text'} a[Text from block]","title":"Examples"},{"location":"$tree/","text":"$tree $tree type related attributes: $tree.level $tree.level Tree level is a parameter to define how many levels from top should be kept drawing in tree (hierarchy). Any nodes of level greater than the tree level parameter will be drawn as vertical columns. The following figure demonstrates the concept of tree levels: Usage As meta data attribute - set the tree level of the chart. Assignment $tree.level:v where v is an integer of tree level. Default value of v is 3 . Example %%% $tree.level:4","title":"$tree"},{"location":"$tree/#tree","text":"$tree type related attributes: $tree.level","title":"$tree"},{"location":"$tree/#treelevel","text":"Tree level is a parameter to define how many levels from top should be kept drawing in tree (hierarchy). Any nodes of level greater than the tree level parameter will be drawn as vertical columns. The following figure demonstrates the concept of tree levels:","title":"$tree.level"},{"location":"$tree/#usage","text":"As meta data attribute - set the tree level of the chart.","title":"Usage"},{"location":"$tree/#assignment","text":"$tree.level:v where v is an integer of tree level. Default value of v is 3 .","title":"Assignment"},{"location":"$tree/#example","text":"%%% $tree.level:4","title":"Example"},{"location":"basic/","text":"Basic Concepts of TypeChart 5 min read TypeChart is a lightweight syntax to define simple charts with plaintext. In other words, it is intentionally to make you control less. In this pages the following concepts will be introduced: Line-by-Line interpretation, Text, Headers/Footers, Node/Block, Links, Attributes, and Metadata Line-by-Line Interpretation The code of a chart is the text you type to draw the chart. And the result is called, of course, the chart of the code. You cannot break the definition of an object into two lines of code in TypeChart. A line of code ( LOC ) may be one of the following: Header/Footer: if the LOC is prefixed with # or ## or ### etc, followed with a space ( ). Node List: if the LOC is a list of node notation, separated with comma ( , ) Link notation: if the LOC is a link notation or a chain of link notations. Metadata line: if the LOC is prefixed with %%% followed with a space ( ). Example Chart The code (with line number) and the chart of the example: 1 %%% $border:1 $bg:white 2 # Example of a chart 3 a[TypeChart], b[Metadata],c[Headers/Footers], d[Links],e[Nodes] 4 a---b,c,d,e 5 #### Made with \u2665 TypeChart Line 1 : %%% $border:1 $bg:white is a LOC of metadata. This line defines two global attributes. Line 2 : # Example of a chart is a LOC of headers. Line 3 to 4 are the LOC s to define the tree. Line 3 : a[TypeChart], b[Metadata],c[Headers/Footers], d[Links],e[Nodes] is a LOC of a node list. Line 4 : a---b,c,d,e is a LOC of links. Line 5 : #### Made with \u2665 TypeChart is a LOC of footers. Text Form or Substance? Substance First! In most charts, text content is the most important message in a chart. So text in TypeChart is formattable . Techically, we called they textbox es. In fact, any text in a chart is textbox. Text in Header is a textbox, text in a rectangle is a textbox, etc. They share the same syntax. We will have tutorial about syntax of Text. # **This** is a *sample* __text__. This is a sample text . Headers/Footers You can add headers/footers in all charts in TypeChart. That is header/footer are part of a chart. However, the syntax for them is almost nothing because headers/footers are just textbox es in the specific locations of a chart. Nodes/Blocks Nodes and Blocks are used interchanged sometimes. A node is the data to describe a block. A block is the visual presentation of a node. Examples of nodes are blocks with different shapes: ( Rounded//Rectangle ) , [ Rectangle ] , (( Circle )) , <Rhombus// Sharp> Links A link is a line connecting two blocks. A link may have arrow at the end of it. A --- 1 B --->2 C <---3 D ... 4 E ...>5 F <...6 G === 7 H ===>8 I <===9 Attributes Attributes are special labels prefixed with $ for styling links or blocks in a chart. Attributes are called inline attributes if they are defined in a block notation. Attributes are called global attributes if they are defined in metadata. Example: 1 %%% $tree.level:4 2 %%% $bg:yellow 3 (Process A) ---> (Process B) ---> (Process C) ---> (Process D $bg:lightgreen) Line 1 : %%% $tree.level:4 , defines a chart behavior with attribute $tree.level . (This meaning will be discussed in tree chart.) Line 2 : %%% $bg:yellow , defines attribute $bg , the default background color, to be yellow . Line 3 : in the last node notation (Process D $bg:lightgreen) , the inline attribute $bg is lightgreen . Metadata Metadata is used to define/refine the behavior of a chart. The following must be declare in a metadata LOC : Use of keywords type , import","title":"Basic Concepts"},{"location":"basic/#basic-concepts-of-typechart","text":"5 min read TypeChart is a lightweight syntax to define simple charts with plaintext. In other words, it is intentionally to make you control less. In this pages the following concepts will be introduced: Line-by-Line interpretation, Text, Headers/Footers, Node/Block, Links, Attributes, and Metadata","title":"Basic Concepts of TypeChart"},{"location":"basic/#line-by-line-interpretation","text":"The code of a chart is the text you type to draw the chart. And the result is called, of course, the chart of the code. You cannot break the definition of an object into two lines of code in TypeChart. A line of code ( LOC ) may be one of the following: Header/Footer: if the LOC is prefixed with # or ## or ### etc, followed with a space ( ). Node List: if the LOC is a list of node notation, separated with comma ( , ) Link notation: if the LOC is a link notation or a chain of link notations. Metadata line: if the LOC is prefixed with %%% followed with a space ( ).","title":"Line-by-Line Interpretation"},{"location":"basic/#example-chart","text":"The code (with line number) and the chart of the example: 1 %%% $border:1 $bg:white 2 # Example of a chart 3 a[TypeChart], b[Metadata],c[Headers/Footers], d[Links],e[Nodes] 4 a---b,c,d,e 5 #### Made with \u2665 TypeChart Line 1 : %%% $border:1 $bg:white is a LOC of metadata. This line defines two global attributes. Line 2 : # Example of a chart is a LOC of headers. Line 3 to 4 are the LOC s to define the tree. Line 3 : a[TypeChart], b[Metadata],c[Headers/Footers], d[Links],e[Nodes] is a LOC of a node list. Line 4 : a---b,c,d,e is a LOC of links. Line 5 : #### Made with \u2665 TypeChart is a LOC of footers.","title":"Example Chart"},{"location":"basic/#text","text":"Form or Substance? Substance First! In most charts, text content is the most important message in a chart. So text in TypeChart is formattable . Techically, we called they textbox es. In fact, any text in a chart is textbox. Text in Header is a textbox, text in a rectangle is a textbox, etc. They share the same syntax. We will have tutorial about syntax of Text. # **This** is a *sample* __text__. This is a sample text .","title":"Text"},{"location":"basic/#headersfooters","text":"You can add headers/footers in all charts in TypeChart. That is header/footer are part of a chart. However, the syntax for them is almost nothing because headers/footers are just textbox es in the specific locations of a chart.","title":"Headers/Footers"},{"location":"basic/#nodesblocks","text":"Nodes and Blocks are used interchanged sometimes. A node is the data to describe a block. A block is the visual presentation of a node. Examples of nodes are blocks with different shapes: ( Rounded//Rectangle ) , [ Rectangle ] , (( Circle )) , <Rhombus// Sharp>","title":"Nodes/Blocks"},{"location":"basic/#links","text":"A link is a line connecting two blocks. A link may have arrow at the end of it. A --- 1 B --->2 C <---3 D ... 4 E ...>5 F <...6 G === 7 H ===>8 I <===9","title":"Links"},{"location":"basic/#attributes","text":"Attributes are special labels prefixed with $ for styling links or blocks in a chart. Attributes are called inline attributes if they are defined in a block notation. Attributes are called global attributes if they are defined in metadata. Example: 1 %%% $tree.level:4 2 %%% $bg:yellow 3 (Process A) ---> (Process B) ---> (Process C) ---> (Process D $bg:lightgreen) Line 1 : %%% $tree.level:4 , defines a chart behavior with attribute $tree.level . (This meaning will be discussed in tree chart.) Line 2 : %%% $bg:yellow , defines attribute $bg , the default background color, to be yellow . Line 3 : in the last node notation (Process D $bg:lightgreen) , the inline attribute $bg is lightgreen .","title":"Attributes"},{"location":"basic/#metadata","text":"Metadata is used to define/refine the behavior of a chart. The following must be declare in a metadata LOC : Use of keywords type , import","title":"Metadata"},{"location":"cheat-sheet/","text":"Selected Syntax Examples Sheet td {padding:0px!important;vertical-align:top;} pre {background:#dfdfdf!important;} .code {background:#dfdfdf!important} table {width:100%;} # This is a header of the chart ##< Sub-header 1 ### Sub-header 2 ####> Sub-header 3 # This is a header of the chart in green $color:green ## There are **bold letters**, *italic letters* and __underlined letters__ at this line # **SC**$color:green || Simon CHAM//##### Author of TypeChart # # Sample of textboxes in TypeChart # # *Alice*//#### JavaScript||TypeScript//# *Bob* # ###> Date: 2020-11-20//### @__Hong Kong__ $color:red ## Sample of Nodes (round//rectangle),[rectangle],((circle)),<rhombus// shape> A[Peter] --- 1[Mary] A --- 2[Sue] 1 --- X 1 === Y 2 ... M 2 ... N A --- 1 B --->2 C <---3 D ... 4 E ...>5 F <...6 G === 7 H ===>8 I <===9 fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [Support Supervisor Rose Mary],[Support Engineer Kent Lee] dev--- [Supervisor Kitty Lam],[Developer Vincent Will] inf--- [Senior Engineer Grace Wong],[Engineer Paul Go] fd---itm---as,dev,inf","title":"Selected Examples Sheet"},{"location":"cheat-sheet/#selected-syntax-examples-sheet","text":"td {padding:0px!important;vertical-align:top;} pre {background:#dfdfdf!important;} .code {background:#dfdfdf!important} table {width:100%;} # This is a header of the chart ##< Sub-header 1 ### Sub-header 2 ####> Sub-header 3 # This is a header of the chart in green $color:green ## There are **bold letters**, *italic letters* and __underlined letters__ at this line # **SC**$color:green || Simon CHAM//##### Author of TypeChart # # Sample of textboxes in TypeChart # # *Alice*//#### JavaScript||TypeScript//# *Bob* # ###> Date: 2020-11-20//### @__Hong Kong__ $color:red ## Sample of Nodes (round//rectangle),[rectangle],((circle)),<rhombus// shape> A[Peter] --- 1[Mary] A --- 2[Sue] 1 --- X 1 === Y 2 ... M 2 ... N A --- 1 B --->2 C <---3 D ... 4 E ...>5 F <...6 G === 7 H ===>8 I <===9 fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [Support Supervisor Rose Mary],[Support Engineer Kent Lee] dev--- [Supervisor Kitty Lam],[Developer Vincent Will] inf--- [Senior Engineer Grace Wong],[Engineer Paul Go] fd---itm---as,dev,inf","title":"Selected Syntax Examples Sheet"},{"location":"colors/","text":"Color Values A color value may be one of the followings: CSS color names #RRGGBB or #RGB hex color code CSS function rgba(r,g,b,a) or rgb(r,g,b) Examples [A block $bg:crimson] [A block $bg:#DC143C] [A block $bg:rgba(220,20,60,1)] Reference You may take a look at this CSS Tricks page or this W3Schools page for list of CSS color names.","title":"Colors"},{"location":"colors/#color-values","text":"A color value may be one of the followings: CSS color names #RRGGBB or #RGB hex color code CSS function rgba(r,g,b,a) or rgb(r,g,b)","title":"Color Values"},{"location":"colors/#examples","text":"[A block $bg:crimson] [A block $bg:#DC143C] [A block $bg:rgba(220,20,60,1)]","title":"Examples"},{"location":"colors/#reference","text":"You may take a look at this CSS Tricks page or this W3Schools page for list of CSS color names.","title":"Reference"},{"location":"connection-points/","text":"Connection Points Connection Points (CP) is a mechanism in TypeChart to refine the connection of links and the number of turning points of links. Connection point of a block A connection point of a block ( fromNode or toNode ) of a link is a point on the boundary of the block at which the link connects from or to. Let's see the following two links: You may see the connection point of block A in link 1 is not the same as that in link 2 . Naming of connection points of a block TypeChart defines 16 connection points for every block. TypeChart applies the abbreviation of points of 16-wind compass rose for naming them: n , e , s , w , ne , nw , se , sw , nne , ene , sse , ses , nnw , wnw , ssw , and ssw . By default TypeChart will automatically assign the above connection point names to the blocks of a link, based on their relative position. You may use attributes $cp , $cp.from or $cp.to to change its setting. No of turning points of a link In the first example in this article, you may discover the link 2 has multiple turning points(5 points including the start/end points) while the link 1 has 2 turning points. TypeChart support only two cases: a link of straight line, or a link of multiple turing points. (which is the default behavior) You may use attributes $cp.points to change its setting. If you want to draw a link with straight line, you may set the $cp.points:2 . In the below example, link 4 is set with $cp.points:2 .","title":"Connection points"},{"location":"connection-points/#connection-points","text":"Connection Points (CP) is a mechanism in TypeChart to refine the connection of links and the number of turning points of links.","title":"Connection Points"},{"location":"connection-points/#connection-point-of-a-block","text":"A connection point of a block ( fromNode or toNode ) of a link is a point on the boundary of the block at which the link connects from or to. Let's see the following two links: You may see the connection point of block A in link 1 is not the same as that in link 2 .","title":"Connection point of a block"},{"location":"connection-points/#naming-of-connection-points-of-a-block","text":"TypeChart defines 16 connection points for every block. TypeChart applies the abbreviation of points of 16-wind compass rose for naming them: n , e , s , w , ne , nw , se , sw , nne , ene , sse , ses , nnw , wnw , ssw , and ssw . By default TypeChart will automatically assign the above connection point names to the blocks of a link, based on their relative position. You may use attributes $cp , $cp.from or $cp.to to change its setting.","title":"Naming of connection points of a block"},{"location":"connection-points/#no-of-turning-points-of-a-link","text":"In the first example in this article, you may discover the link 2 has multiple turning points(5 points including the start/end points) while the link 1 has 2 turning points. TypeChart support only two cases: a link of straight line, or a link of multiple turing points. (which is the default behavior) You may use attributes $cp.points to change its setting. If you want to draw a link with straight line, you may set the $cp.points:2 . In the below example, link 4 is set with $cp.points:2 .","title":"No of turning points of a link"},{"location":"decorating-org-chart/","text":"3 min read Objective : Able to understand and write the code: Code ## IT Department of ABC Company fd[Finance Director] itm[**IT Manager**//Chris Mark] as(Application Support $bg:yellow $border:1) dev(Development $bg:yellow $border:1) inf(Infrastructure $bg:yellow $border:1) as --- [**Support Supervisor**//Rose Mary],[**Support Engineer**//Kent Lee] dev--- [**Supervisor**//Kitty Lam],[**Developer**//Vincent Will] inf--- [**Senior Engineer**//Grace Wong],[**Engineer**//Paul Go $color:pink] fd---itm---as,dev,inf # #### Made with \u2665 TypeChart Chat Progressive Progressive writing and progressive learning. The final chart in Simple Org Chart seems to be sufficient to denote the key info. Decorating it may not be necessary. However, if there is a need to delivery more visual info or signal in your chart, decorating the chart in TypeChart is still possible but limited. Attributes We have introduced a bit about attributes in the basic concepts in the Guides. They are used to style links or blocks in a chart. In this tutorial, we will use only the following attributes: $border - the number of the size the border of a block. $bg - the background color of a block. $color - the text color of a text line. Formatting textboxes Let's start from the last chart in Simple Org Chart : Let's format the text in each block so that 1. the job titles and the staff names are split to two lines, and 2. make the titles bold: fd[Finance Director] itm[**IT Manager**//Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [**Support Supervisor**//Rose Mary],[**Support Engineer**//Kent Lee] dev--- [**Supervisor**//Kitty Lam],[**Developer**//Vincent Will] inf--- [**Senior Engineer**//Grace Wong],[**Engineer**//Paul Go] fd---itm---as,dev,inf Styling blocks Let's make the blocks of teams look different from the blocks of persons. It may be a good idea to change the background color and adding border to those blocks of teams. In each note notation of those blocks, append the code $bg:yellow $border:1 . as(Application Support $bg:yellow $border:1) dev(Development $bg:yellow $border:1) inf(Infrastructure $bg:yellow $border:1) Then the chart becomes: Highlight a person Suppose Paul Go, an engineer, is an intern. We want to highlight this info by coloring its name. In the note notation of Paul, append the code $color:pink . inf--- [**Senior Engineer**//Grace Wong],[**Engineer**//Paul Go $color:pink] The chart becomes:","title":"Decorating Org Chart"},{"location":"decorating-org-chart/#progressive","text":"Progressive writing and progressive learning. The final chart in Simple Org Chart seems to be sufficient to denote the key info. Decorating it may not be necessary. However, if there is a need to delivery more visual info or signal in your chart, decorating the chart in TypeChart is still possible but limited.","title":"Progressive"},{"location":"decorating-org-chart/#attributes","text":"We have introduced a bit about attributes in the basic concepts in the Guides. They are used to style links or blocks in a chart. In this tutorial, we will use only the following attributes: $border - the number of the size the border of a block. $bg - the background color of a block. $color - the text color of a text line.","title":"Attributes"},{"location":"decorating-org-chart/#formatting-textboxes","text":"Let's start from the last chart in Simple Org Chart : Let's format the text in each block so that 1. the job titles and the staff names are split to two lines, and 2. make the titles bold: fd[Finance Director] itm[**IT Manager**//Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [**Support Supervisor**//Rose Mary],[**Support Engineer**//Kent Lee] dev--- [**Supervisor**//Kitty Lam],[**Developer**//Vincent Will] inf--- [**Senior Engineer**//Grace Wong],[**Engineer**//Paul Go] fd---itm---as,dev,inf","title":"Formatting textboxes"},{"location":"decorating-org-chart/#styling-blocks","text":"Let's make the blocks of teams look different from the blocks of persons. It may be a good idea to change the background color and adding border to those blocks of teams. In each note notation of those blocks, append the code $bg:yellow $border:1 . as(Application Support $bg:yellow $border:1) dev(Development $bg:yellow $border:1) inf(Infrastructure $bg:yellow $border:1) Then the chart becomes:","title":"Styling blocks"},{"location":"decorating-org-chart/#highlight-a-person","text":"Suppose Paul Go, an engineer, is an intern. We want to highlight this info by coloring its name. In the note notation of Paul, append the code $color:pink . inf--- [**Senior Engineer**//Grace Wong],[**Engineer**//Paul Go $color:pink] The chart becomes:","title":"Highlight a person"},{"location":"nodes/","text":"Simple Nodes (Blocks) 3 min read Objective : Able to understand and write the code: Code ## Sample of Nodes (round//rectangle),[rectangle],((circle)),<rhombus// shape> Chart Node Notations A node notation is used to define a block in a chart. The following is an example of node notation: code a[This is my block] chart In this example: a is called the label or id of the node. It is required to be unique in a chart. [ and ] is the block brackets which defines the shape of the block. [ and ] also encloses the block content. This is my block is the block content of the node. It is the text content with/without attributes. Info Use only number or letter to define your label of a node. TypeChart by default draws a block as a rectangle. However, you have other options for the shape: shape block brackets symbol rectangle [ ] round-corner rectangle ( ) circle (( )) rhombus < > More Examples You may define multiple nodes so that each node in a LOC . 1[Block A] 2[Block B] 3[Block C] or you may define them in one LOC as a node list separated with comma , . 1[Block A], 2[Block B], 3[Block C] Variants Syntax variants or simply variants, sometimes let you write your code faster. Label Only You can write a note notation with label only. TypeChart will automatically draw the rectangle block with the label as its block content. Example: code Kitty Mary chart Label and Shape Only You can also add a pair of block brackets without any block content. TypeChart will draw the shape you defined with the label as its block content. code Kitty(()) Mary<> chart Content Only You can write block content enclosed with a pair of block brackets. TypeChart will automatically assign the label for it. code ((Kitty)) <Mary> chart Exercises Guess what will be draw for the code [],(),(()),<>,a .","title":"Simple Nodes"},{"location":"nodes/#simple-nodes-blocks","text":"3 min read Objective : Able to understand and write the code: Code ## Sample of Nodes (round//rectangle),[rectangle],((circle)),<rhombus// shape> Chart","title":"Simple Nodes (Blocks)"},{"location":"nodes/#node-notations","text":"A node notation is used to define a block in a chart. The following is an example of node notation: code a[This is my block] chart In this example: a is called the label or id of the node. It is required to be unique in a chart. [ and ] is the block brackets which defines the shape of the block. [ and ] also encloses the block content. This is my block is the block content of the node. It is the text content with/without attributes. Info Use only number or letter to define your label of a node. TypeChart by default draws a block as a rectangle. However, you have other options for the shape: shape block brackets symbol rectangle [ ] round-corner rectangle ( ) circle (( )) rhombus < >","title":"Node Notations"},{"location":"nodes/#more-examples","text":"You may define multiple nodes so that each node in a LOC . 1[Block A] 2[Block B] 3[Block C] or you may define them in one LOC as a node list separated with comma , . 1[Block A], 2[Block B], 3[Block C]","title":"More Examples"},{"location":"nodes/#variants","text":"Syntax variants or simply variants, sometimes let you write your code faster.","title":"Variants"},{"location":"nodes/#label-only","text":"You can write a note notation with label only. TypeChart will automatically draw the rectangle block with the label as its block content. Example: code Kitty Mary chart","title":"Label Only"},{"location":"nodes/#label-and-shape-only","text":"You can also add a pair of block brackets without any block content. TypeChart will draw the shape you defined with the label as its block content. code Kitty(()) Mary<> chart","title":"Label and Shape Only"},{"location":"nodes/#content-only","text":"You can write block content enclosed with a pair of block brackets. TypeChart will automatically assign the label for it. code ((Kitty)) <Mary> chart","title":"Content Only"},{"location":"nodes/#exercises","text":"Guess what will be draw for the code [],(),(()),<>,a .","title":"Exercises"},{"location":"reference/","text":"This reference contains information about Attributes Chart types and other concepts","title":"Introduction"},{"location":"simple-org-chart/","text":"3 min read Objective : Able to understand and write the code: Code fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [Support Supervisor Rose Mary],[Support Engineer Kent Lee] dev--- [Supervisor Kitty Lam],[Developer Vincent Will] inf--- [Senior Engineer Grace Wong],[Engineer Paul Go] fd---itm---as,dev,inf Chart What is an Organizational Chart Please refer wiki (English) or mbaLib (Chinese). There are no standard for drawing org charts. Let's draw it with TypeChart tree chart. Jot down key info first Form or Substance? Substance first! I will recommend to jot down the entities first. [Finance Director] [IT Manager Chris Mark] (Application Support) (Development) (Infrastructure) [Support Supervisor Rose Mary],[Support Engineer Kent Lee] [Supervisor Kitty Lam],[Developer Vincent Will] [Senior Engineer Grace Wong],[Engineer Paul Go] I just use rounded rectangles for teams and rectangle for persons. Labeling on demand Also I then know the first 5 nodes will have children in the chart. In other words they are the fromNode s of links in the chart. Therefore I add labels for these 5 nodes so that the link notations can use labels only. Just some common abbreviations is OK. fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) [Support Supervisor Rose Mary],[Support Engineer Kent Lee] [Supervisor Kitty Lam],[Developer Vincent Will] [Senior Engineer Grace Wong],[Engineer Paul Go] Draw the relations Write links notation to express their hierarchy relations: fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [Support Supervisor Rose Mary],[Support Engineer Kent Lee] dev--- [Supervisor Kitty Lam],[Developer Vincent Will] inf--- [Senior Engineer Grace Wong],[Engineer Paul Go] fd---itm---as,dev,inf Exercise Write the org-chart of your department or team.","title":"Simple Org Chart"},{"location":"simple-org-chart/#what-is-an-organizational-chart","text":"Please refer wiki (English) or mbaLib (Chinese). There are no standard for drawing org charts. Let's draw it with TypeChart tree chart.","title":"What is an Organizational Chart"},{"location":"simple-org-chart/#jot-down-key-info-first","text":"Form or Substance? Substance first! I will recommend to jot down the entities first. [Finance Director] [IT Manager Chris Mark] (Application Support) (Development) (Infrastructure) [Support Supervisor Rose Mary],[Support Engineer Kent Lee] [Supervisor Kitty Lam],[Developer Vincent Will] [Senior Engineer Grace Wong],[Engineer Paul Go] I just use rounded rectangles for teams and rectangle for persons.","title":"Jot down key info first"},{"location":"simple-org-chart/#labeling-on-demand","text":"Also I then know the first 5 nodes will have children in the chart. In other words they are the fromNode s of links in the chart. Therefore I add labels for these 5 nodes so that the link notations can use labels only. Just some common abbreviations is OK. fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) [Support Supervisor Rose Mary],[Support Engineer Kent Lee] [Supervisor Kitty Lam],[Developer Vincent Will] [Senior Engineer Grace Wong],[Engineer Paul Go]","title":"Labeling on demand"},{"location":"simple-org-chart/#draw-the-relations","text":"Write links notation to express their hierarchy relations: fd[Finance Director] itm[IT Manager Chris Mark] as(Application Support) dev(Development) inf(Infrastructure) as --- [Support Supervisor Rose Mary],[Support Engineer Kent Lee] dev--- [Supervisor Kitty Lam],[Developer Vincent Will] inf--- [Senior Engineer Grace Wong],[Engineer Paul Go] fd---itm---as,dev,inf","title":"Draw the relations"},{"location":"simple-org-chart/#exercise","text":"Write the org-chart of your department or team.","title":"Exercise"},{"location":"text-1/","text":"Text 1 3 min read Objective : Able to understand and write the code: Code # This is a header of the chart ##< Sub-header 1 ### Sub-header 2 ####> Sub-header 3 Chart Headers Any LOC prefixed with # followed by a space before any LOC of node or link notations is rendered as a header line in the chart. Example of a LOC a header (don\u2019t forget the space followed the # sign): # This is a header of the chart Sub-headers Repeated # then followed by a space is also a LOC of headers, but the size of the text is reduced step by step. Example of sub headers: # This is my header ## This is my subheader Text Line Decorator The symbol # or repeated # is called a decorator of a text line or a text line decorator . Optionally a decorator can be followed with symbol < or > to define the alignment of the text. size decorator alignment decorator alignment decorator alignment 1 # center #< left #> right 2 ## center ##< left ##> right 3 ### center ###< left ###> right 4 #### center ####< left ####> right 5 ##### center #####< left #####> right size - 1 is the largest and 5 is smallest Text Size TypeChart has 5 predefine font sizes for you define the size per each text line. Text Alignment Decorator allow you define the alignment of a text line. Info Alignment symbol has effect only in headers or footers LOC . Empty Text Line To write a empty text line, use decorator followed with two spaces ( ). Exercise Try to write the following letter with TypeChart. (the original post is here ) Reference Answer # Sample Friendly Letter ##> 123 Candy Lane ##> Sanguaro, AZ 12345 ##> October 2, 2010 # ##< Dear Emma, ##< How have you been? It has been a week since my ##< family and I moved. Living in Arizona is very difficult from ##< living in West Virginia. The climate is much hotter. ##< The plants look very different. I will send you some pictures ##< so you can see my new home. Write back soon. # ##> Your friend, ##> Ava # #### source: \"https://www.slideshare.net/kfedio/how-to-write-a-friendly-letter-5379655\"","title":"Text 1"},{"location":"text-1/#text-1","text":"3 min read Objective : Able to understand and write the code: Code # This is a header of the chart ##< Sub-header 1 ### Sub-header 2 ####> Sub-header 3 Chart","title":"Text 1"},{"location":"text-1/#headers","text":"Any LOC prefixed with # followed by a space before any LOC of node or link notations is rendered as a header line in the chart. Example of a LOC a header (don\u2019t forget the space followed the # sign): # This is a header of the chart","title":"Headers"},{"location":"text-1/#sub-headers","text":"Repeated # then followed by a space is also a LOC of headers, but the size of the text is reduced step by step. Example of sub headers: # This is my header ## This is my subheader","title":"Sub-headers"},{"location":"text-1/#text-line-decorator","text":"The symbol # or repeated # is called a decorator of a text line or a text line decorator . Optionally a decorator can be followed with symbol < or > to define the alignment of the text. size decorator alignment decorator alignment decorator alignment 1 # center #< left #> right 2 ## center ##< left ##> right 3 ### center ###< left ###> right 4 #### center ####< left ####> right 5 ##### center #####< left #####> right size - 1 is the largest and 5 is smallest","title":"Text Line Decorator"},{"location":"text-1/#text-size","text":"TypeChart has 5 predefine font sizes for you define the size per each text line.","title":"Text Size"},{"location":"text-1/#text-alignment","text":"Decorator allow you define the alignment of a text line. Info Alignment symbol has effect only in headers or footers LOC .","title":"Text Alignment"},{"location":"text-1/#empty-text-line","text":"To write a empty text line, use decorator followed with two spaces ( ).","title":"Empty Text Line"},{"location":"text-1/#exercise","text":"Try to write the following letter with TypeChart. (the original post is here ) Reference Answer # Sample Friendly Letter ##> 123 Candy Lane ##> Sanguaro, AZ 12345 ##> October 2, 2010 # ##< Dear Emma, ##< How have you been? It has been a week since my ##< family and I moved. Living in Arizona is very difficult from ##< living in West Virginia. The climate is much hotter. ##< The plants look very different. I will send you some pictures ##< so you can see my new home. Write back soon. # ##> Your friend, ##> Ava # #### source: \"https://www.slideshare.net/kfedio/how-to-write-a-friendly-letter-5379655\"","title":"Exercise"},{"location":"text-2/","text":"Text 2 2 min read Objective : Able to understand and write the code: Code # This is a header of the chart in green $color:green ## There are **bold letters**, *italic letters* and __underlined letters__ at this line Chart Text Color (Font Color) You can define text color for a whole text line with the attribute $color . You assign the value of $color with : and the color name green . (no space among them!). $color accepts value in: the 147 standard CSS color names (e.g. red, orange, darkblue etc), the #RRGGBB hex color code format, and CSS function rgba(r,g,b,a) . Text Style TypeChart provides only three style to format a string in a text: bold, italic, and underlined. Info Any string can only has one of the three styles. It cannot be mixed together. Bold Make your text bold by adding two asterisks ( * ) before and after a word or phrase. Italic Make your text italic by adding only one asterisk ( * ) before and after a word or phrase. Underlined Make your text underlined by adding only two underscores ( _ ) before and after a word or phrase. Exercise Try to write the following quiz with TypeChart. Reference Answer # **Simple Math Quiz** $color:blue ## Time allowed: 3 min $color:red # #< __1__: 3 + __ __ = 12 # #< __2__: 12 X 4 = __ __ # ### *End of Quiz*","title":"Text 2"},{"location":"text-2/#text-2","text":"2 min read Objective : Able to understand and write the code: Code # This is a header of the chart in green $color:green ## There are **bold letters**, *italic letters* and __underlined letters__ at this line Chart","title":"Text 2"},{"location":"text-2/#text-color-font-color","text":"You can define text color for a whole text line with the attribute $color . You assign the value of $color with : and the color name green . (no space among them!). $color accepts value in: the 147 standard CSS color names (e.g. red, orange, darkblue etc), the #RRGGBB hex color code format, and CSS function rgba(r,g,b,a) .","title":"Text Color (Font Color)"},{"location":"text-2/#text-style","text":"TypeChart provides only three style to format a string in a text: bold, italic, and underlined. Info Any string can only has one of the three styles. It cannot be mixed together.","title":"Text Style"},{"location":"text-2/#bold","text":"Make your text bold by adding two asterisks ( * ) before and after a word or phrase.","title":"Bold"},{"location":"text-2/#italic","text":"Make your text italic by adding only one asterisk ( * ) before and after a word or phrase.","title":"Italic"},{"location":"text-2/#underlined","text":"Make your text underlined by adding only two underscores ( _ ) before and after a word or phrase.","title":"Underlined"},{"location":"text-2/#exercise","text":"Try to write the following quiz with TypeChart. Reference Answer # **Simple Math Quiz** $color:blue ## Time allowed: 3 min $color:red # #< __1__: 3 + __ __ = 12 # #< __2__: 12 X 4 = __ __ # ### *End of Quiz*","title":"Exercise"},{"location":"text-3/","text":"Text 3 3 min read Objective : Able to understand and write the code: Code # **SC**$color:green || Simon CHAM//##### Author of TypeChart # # Sample of textboxes in TypeChart # # *Alice*//#### JavaScript||TypeScript//# *Bob* # ###> Date: 2020-11-20//### @__Hong Kong__ $color:red Chart Textbox Every text rendered in TypeChart is in a container so called a textbox . A textbox allow the text to be multi-column. And each column can have multiple lines. Col 1 Line 1 Col 1 Line 2 Col 2 Line 1 Col 2 Line 2 Multiple lines To split a text in a LOC into multiple lines, use symbole double slash ( // ). For example, the code: ###> Date: 2020-11-20//### @__Hong Kong__ $color:red will be splite into two lines: ###> Date: 2020-11-20 ### @__Hong Kong__ $color:red Info The alignment indicator > is for the whole textbox. Therefore the whole textbox will be right aligned. The attribute $color is per text line. So only the second line will be in red. The text lines of a textbox are always left aligned. Columnization To columnize a text in LOC , use symbol double pipe || . For example, the code: # **SC**$color:green || Simon CHAM//##### Author of TypeChart will be columnized as: # **SC**$color:green Simon CHAM//##### Author of TypeChart Further, the second column in the above example will be split into two line with the symbol // : # **SC**$color:green Simon CHAM ##### Author of TypeChart Info A text line without decorator will be rendered as size of #### .","title":"Text 3"},{"location":"text-3/#text-3","text":"3 min read Objective : Able to understand and write the code: Code # **SC**$color:green || Simon CHAM//##### Author of TypeChart # # Sample of textboxes in TypeChart # # *Alice*//#### JavaScript||TypeScript//# *Bob* # ###> Date: 2020-11-20//### @__Hong Kong__ $color:red Chart","title":"Text 3"},{"location":"text-3/#textbox","text":"Every text rendered in TypeChart is in a container so called a textbox . A textbox allow the text to be multi-column. And each column can have multiple lines. Col 1 Line 1 Col 1 Line 2 Col 2 Line 1 Col 2 Line 2","title":"Textbox"},{"location":"text-3/#multiple-lines","text":"To split a text in a LOC into multiple lines, use symbole double slash ( // ). For example, the code: ###> Date: 2020-11-20//### @__Hong Kong__ $color:red will be splite into two lines: ###> Date: 2020-11-20 ### @__Hong Kong__ $color:red Info The alignment indicator > is for the whole textbox. Therefore the whole textbox will be right aligned. The attribute $color is per text line. So only the second line will be in red. The text lines of a textbox are always left aligned.","title":"Multiple lines"},{"location":"text-3/#columnization","text":"To columnize a text in LOC , use symbol double pipe || . For example, the code: # **SC**$color:green || Simon CHAM//##### Author of TypeChart will be columnized as: # **SC**$color:green Simon CHAM//##### Author of TypeChart Further, the second column in the above example will be split into two line with the symbol // : # **SC**$color:green Simon CHAM ##### Author of TypeChart Info A text line without decorator will be rendered as size of #### .","title":"Columnization"},{"location":"text/","text":"Text 5 min read Let's start with Header to learn the syntax of Text . Headers Any LOC prefixed with # followed by a space before any LOC of node or link notations is rendered as a header line in the chart. Example of a LOC a header (don\u2019t forget the space followed the # sign): # This is a text Sub-headers Repeated # then followed by a space is also a LOC of headers, but the size of the text is reduced step by step. Example of sub headers: # This is my header ## This is my subheader Text Line Decorator The symbol # or repeated # , optionally followed with < or > is called a decorator of a text line or a text line decorator . size decorator alignment decorator alignment decorator alignment 1 # center #< left #> right 2 ## center ##< left ##> right 3 ### center ###< left ###> right 4 #### center ####< left ####> right 5 ##### center #####< left #####> right size - 1 is the largest and 5 is smallest Font Size TypeChart has 5 predefine font sizes for you define the size per each text line. Text Alignment Decorator allow you define the alignment of a text line.","title":"Text"},{"location":"text/#text","text":"5 min read Let's start with Header to learn the syntax of Text .","title":"Text"},{"location":"text/#headers","text":"Any LOC prefixed with # followed by a space before any LOC of node or link notations is rendered as a header line in the chart. Example of a LOC a header (don\u2019t forget the space followed the # sign): # This is a text","title":"Headers"},{"location":"text/#sub-headers","text":"Repeated # then followed by a space is also a LOC of headers, but the size of the text is reduced step by step. Example of sub headers: # This is my header ## This is my subheader","title":"Sub-headers"},{"location":"text/#text-line-decorator","text":"The symbol # or repeated # , optionally followed with < or > is called a decorator of a text line or a text line decorator . size decorator alignment decorator alignment decorator alignment 1 # center #< left #> right 2 ## center ##< left ##> right 3 ### center ###< left ###> right 4 #### center ####< left ####> right 5 ##### center #####< left #####> right size - 1 is the largest and 5 is smallest","title":"Text Line Decorator"},{"location":"text/#font-size","text":"TypeChart has 5 predefine font sizes for you define the size per each text line.","title":"Font Size"},{"location":"text/#text-alignment","text":"Decorator allow you define the alignment of a text line.","title":"Text Alignment"},{"location":"toc/","text":"Beginner Tutorial TOC This series of tutorial pages are suitable for beginners. This tutorial will walk you through the following: Text 1 (Headers, Text Size, and Alignment) 3 min read Text 2 (Colors,Text Style) 2 min read Text 3 (Textbox) 3 min read Simple Nodes 3 min read Simple Tree 3 min read Simple Org Chart 3 min read Decorating Org Chart 3 min read","title":"TOC"},{"location":"toc/#beginner-tutorial-toc","text":"This series of tutorial pages are suitable for beginners. This tutorial will walk you through the following: Text 1 (Headers, Text Size, and Alignment) 3 min read Text 2 (Colors,Text Style) 2 min read Text 3 (Textbox) 3 min read Simple Nodes 3 min read Simple Tree 3 min read Simple Org Chart 3 min read Decorating Org Chart 3 min read","title":"Beginner Tutorial TOC"},{"location":"trees/","text":"Simple Trees 3 min read Objective : Able to understand and write the code: Code A[Peter] --- 1[Mary] A --- 2[Sue] 1 --- X 1 === Y 2 ... M 2 ... N Chart Link Notations The following is an example of a link notation: code a[Mary] --> b[Peter] chart In this example: a[Mary] is a node notation which begins the link. It is called the fromNode of a link. b[Peter] is a node notation which ends the link. It is called the toNode of a link. --> is the link symbol between the fromNode and toNode . If a fromNode or toNode is already defined in other LOC before the link notation. Use the label of fromNode or toNode in the link notation. The following code will draw the same chart as the above. a[Mary] b[Peter] a --> b Link Styles We show you some of the link styles for your reference: Link Notation Link Symbol Description A --- 1 --- solid line B --->2 ---> solid line with arrow forward C <---3 <--- solid line with arrow backward D ... 4 ... dotted line E ...>5 ...> dotted line with arrow forward F <...6 <... dotted line with arrow backward G === 7 === bold line H ===>8 ===> bold line with arrow forward I <===9 <=== bold line with arrow backward Chart Types There are several chart types in TypeChart. (e.g. pie chart, bar chart, etc. ) TypeChart will draw and arrange nodes and links in different manner for different chart types. tree type chart will draw the links from top to bottom in a hierarchy layout. The default chart type of TypeChart is tree . Tree A tree is a list of links that can be chained from a root node. Example: A --- 1 A --- 2 1 --- X 1 --- Y 2 --- M 2 --- N In the above example, TypeChart will draw A as the root node at the top, then draw links to 1 and 2 as A 's children. Then draw links to X and Y as 1 's children as so on. Variants Link to Node Lists For a link notation where a fromNode to more than one toNode s, we may simply write it in one LOC , provided that all the links share the same link style. 1 --- X,Y is the same as 1 --- X 1 --- Y Chain of Links We can also write chain of links in one LOC : A --- 1 --- X is the same as A --- 1 1 --- X Exercises Rewrite the following code in two LOC only. A --- 1 A --- 2 1 --- X 1 --- Y 2 --- M 2 --- N Reference Answer A --- 1 --- X,Y A --- 2 --- M,N","title":"Simple Tree"},{"location":"trees/#simple-trees","text":"3 min read Objective : Able to understand and write the code: Code A[Peter] --- 1[Mary] A --- 2[Sue] 1 --- X 1 === Y 2 ... M 2 ... N Chart","title":"Simple Trees"},{"location":"trees/#link-notations","text":"The following is an example of a link notation: code a[Mary] --> b[Peter] chart In this example: a[Mary] is a node notation which begins the link. It is called the fromNode of a link. b[Peter] is a node notation which ends the link. It is called the toNode of a link. --> is the link symbol between the fromNode and toNode . If a fromNode or toNode is already defined in other LOC before the link notation. Use the label of fromNode or toNode in the link notation. The following code will draw the same chart as the above. a[Mary] b[Peter] a --> b","title":"Link Notations"},{"location":"trees/#link-styles","text":"We show you some of the link styles for your reference: Link Notation Link Symbol Description A --- 1 --- solid line B --->2 ---> solid line with arrow forward C <---3 <--- solid line with arrow backward D ... 4 ... dotted line E ...>5 ...> dotted line with arrow forward F <...6 <... dotted line with arrow backward G === 7 === bold line H ===>8 ===> bold line with arrow forward I <===9 <=== bold line with arrow backward","title":"Link Styles"},{"location":"trees/#chart-types","text":"There are several chart types in TypeChart. (e.g. pie chart, bar chart, etc. ) TypeChart will draw and arrange nodes and links in different manner for different chart types. tree type chart will draw the links from top to bottom in a hierarchy layout. The default chart type of TypeChart is tree .","title":"Chart Types"},{"location":"trees/#tree","text":"A tree is a list of links that can be chained from a root node. Example: A --- 1 A --- 2 1 --- X 1 --- Y 2 --- M 2 --- N In the above example, TypeChart will draw A as the root node at the top, then draw links to 1 and 2 as A 's children. Then draw links to X and Y as 1 's children as so on.","title":"Tree"},{"location":"trees/#variants","text":"","title":"Variants"},{"location":"trees/#link-to-node-lists","text":"For a link notation where a fromNode to more than one toNode s, we may simply write it in one LOC , provided that all the links share the same link style. 1 --- X,Y is the same as 1 --- X 1 --- Y","title":"Link to Node Lists"},{"location":"trees/#chain-of-links","text":"We can also write chain of links in one LOC : A --- 1 --- X is the same as A --- 1 1 --- X","title":"Chain of Links"},{"location":"trees/#exercises","text":"Rewrite the following code in two LOC only. A --- 1 A --- 2 1 --- X 1 --- Y 2 --- M 2 --- N Reference Answer A --- 1 --- X,Y A --- 2 --- M,N","title":"Exercises"},{"location":"type-bar/","text":"Bar Charts Chart Examples Code Example We will explain the syntax with the following code example: %%% type bar %%% $grid.interval:40 $bar.width:80 $bar.scale:1.7 ## Readers\"'\" Choice Group A 42,55,35,22,22 Group B 35,30,50,45,45 [$is:legend $bg:steelblue Series 1] [$is:legend $bg:mediumseagreen Series 2] [$is:legend $bg:gold Series 3] [$is:legend $bg:darkorange Series 4] [$is:legend $bg:blueviolet Series 3] [$is:y-axis Number of readers] #### Made with \u2665 TypeChart Declare Chart Type You must use the following LOC to declare the chart is a bar chart. %%% type bar Sub-types Bar chart has two sub-types: grouped bar chart and stacked bar chart. Default is the stacked bar chart. To declare a grouped bar chart, write the following meta data line: %%% $bar:group Bars A group of bar is called bar group no matter it is a stacked or grouped bar chart. A bar group is represented with a LOC of node list . The block content in the first node in a LOC is the group label. In the LOC below [Group A $n:42],[$n:55],[$n:35],[$n:22],[$n:22] or equivalent Group A 42,55,35,22,22 the group label is Group A with 5 bars of values 42 , 55 , 35 , 22 , and 22 respectively. Special Purpose Blocks Legend Legend is optional. A legend is a node notation with $is:legend attribute setting and the block content is the text of the legend. The first legend is for the first bar of all bar groups. The second legend is for the second bar, and so on. Special Attribute Usage Attribute $bg in a legend of n-th bar is the background color of the n-th bar. It is optional as bar chart will use the default colors if $bg not specified. [$is:legend $bg:steelblue Series 1] Y-Axis Label Y-axis label is optional. [$is:y-axis No of Readers] Decoration bar color See Colors reference and Legend. bar scale See Attribute $bar.scale bar width See Attribute $bar.width grid lines visibility See Attribute $grid to display or hide the gride lines grid lines interval See Attribute $grid.interval Limitation Numeric parameter $n only accepts positive number.","title":"bar"},{"location":"type-bar/#bar-charts","text":"","title":"Bar Charts"},{"location":"type-bar/#chart-examples","text":"","title":"Chart Examples"},{"location":"type-bar/#code-example","text":"We will explain the syntax with the following code example: %%% type bar %%% $grid.interval:40 $bar.width:80 $bar.scale:1.7 ## Readers\"'\" Choice Group A 42,55,35,22,22 Group B 35,30,50,45,45 [$is:legend $bg:steelblue Series 1] [$is:legend $bg:mediumseagreen Series 2] [$is:legend $bg:gold Series 3] [$is:legend $bg:darkorange Series 4] [$is:legend $bg:blueviolet Series 3] [$is:y-axis Number of readers] #### Made with \u2665 TypeChart","title":"Code Example"},{"location":"type-bar/#declare-chart-type","text":"You must use the following LOC to declare the chart is a bar chart. %%% type bar","title":"Declare Chart Type"},{"location":"type-bar/#sub-types","text":"Bar chart has two sub-types: grouped bar chart and stacked bar chart. Default is the stacked bar chart. To declare a grouped bar chart, write the following meta data line: %%% $bar:group","title":"Sub-types"},{"location":"type-bar/#bars","text":"A group of bar is called bar group no matter it is a stacked or grouped bar chart. A bar group is represented with a LOC of node list . The block content in the first node in a LOC is the group label. In the LOC below [Group A $n:42],[$n:55],[$n:35],[$n:22],[$n:22] or equivalent Group A 42,55,35,22,22 the group label is Group A with 5 bars of values 42 , 55 , 35 , 22 , and 22 respectively.","title":"Bars"},{"location":"type-bar/#special-purpose-blocks","text":"","title":"Special Purpose Blocks"},{"location":"type-bar/#legend","text":"Legend is optional. A legend is a node notation with $is:legend attribute setting and the block content is the text of the legend. The first legend is for the first bar of all bar groups. The second legend is for the second bar, and so on. Special Attribute Usage Attribute $bg in a legend of n-th bar is the background color of the n-th bar. It is optional as bar chart will use the default colors if $bg not specified. [$is:legend $bg:steelblue Series 1]","title":"Legend"},{"location":"type-bar/#y-axis-label","text":"Y-axis label is optional. [$is:y-axis No of Readers]","title":"Y-Axis Label"},{"location":"type-bar/#decoration","text":"","title":"Decoration"},{"location":"type-bar/#bar-color","text":"See Colors reference and Legend.","title":"bar color"},{"location":"type-bar/#bar-scale","text":"See Attribute $bar.scale","title":"bar scale"},{"location":"type-bar/#bar-width","text":"See Attribute $bar.width","title":"bar width"},{"location":"type-bar/#grid-lines-visibility","text":"See Attribute $grid to display or hide the gride lines","title":"grid lines visibility"},{"location":"type-bar/#grid-lines-interval","text":"See Attribute $grid.interval","title":"grid lines interval"},{"location":"type-bar/#limitation","text":"Numeric parameter $n only accepts positive number.","title":"Limitation"},{"location":"type-pie/","text":"Pie Charts Chart Examples","title":"pie"},{"location":"type-pie/#pie-charts","text":"","title":"Pie Charts"},{"location":"type-pie/#chart-examples","text":"","title":"Chart Examples"}]}